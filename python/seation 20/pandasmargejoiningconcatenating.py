# -*- coding: utf-8 -*-
"""PandasMargeJoiningConcatenating.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11RQ3V01F2hmPI3hzuVna5VD09z7foMxj
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
print('import all libary')

# all csv import
courses=pd.read_csv('/content/courses.csv')
students=pd.read_csv('/content/students.csv')
reg_months=pd.read_csv('/content/reg-month1.csv')
reg_months_two=pd.read_csv('/content/reg-month2.csv')
matches=pd.read_csv('/content/matches.csv')
ipl=pd.read_csv('/content/deliveries.csv')

print("all the Csv file are imported".title())

courses

students

reg_months

reg_months_two

ipl

# concate
all_reg=pd.concat([reg_months,reg_months_two],ignore_index=True)
all_reg

# multi_index

reg=pd.concat([reg_months,reg_months_two],keys=['Nov','Dec'])
reg

reg.loc['Nov']

reg.loc[('Dec',8)]

inner=pd.merge(left=all_reg,right=students,on='student_id',how='inner')
inner

# left join
left=pd.merge(left=courses,right=inner,how='left',on='course_id')
left

# 1.find the total_number of revenue

reg=pd.merge(left=all_reg,right=courses,how='inner',on='course_id')
sum=0
for i in reg['price']:
  sum+=i
print(sum)

courses

dta=pd.concat([reg_months,reg_months_two],keys=['Nov','Dec']).reset_index()
dta=dta.merge(courses,how='left',on='course_id')

dta=dta.drop('level_1',axis=1)
dta.groupby(['level_0']).agg({'price':'sum','student_id':'count','course_id':'count'})
# dta.groupby(['level_0','course_name']).agg({'price':'sum','student_id':'count','course_id':'count'})

# find who are enroll both nov and dec

# using numpy

common_student_id=np.intersect1d(reg_months['student_id'],reg_months_two['student_id'])
students[students['student_id'].isin(common_student_id)]

# kun kun course keo buy kore nai

courses[~courses['course_id'].isin(all_reg['course_id'])]

# using numpy
notBY=np.setdiff1d(courses['course_id'],all_reg['course_id'])
courses[courses['course_id'].isin(notBY)]

# which students do not enroll any couses ?

# numpy
studentNotReg=np.setdiff1d(students['student_id'],all_reg['student_id'])
students[students['student_id'].isin(studentNotReg)]

students[~students['student_id'].isin(all_reg['student_id'])]

# self join
students.merge(students,how='inner',left_on='partner',right_on='student_id')[['student_id_x','name_x','name_y']].rename(columns={'student_id_x':'student_id','name_x':'student_name','name_y':'partner_name'})

# top 3 studnet who enroll most

top_three=students.merge(all_reg,how='inner',on='student_id').groupby('student_id')['course_id'].count().sort_values(ascending=False)[:3]

students[students['student_id'].isin(top_three.index)].merge(top_three,how='inner',on='student_id')

# top 3 student who spend more money

full_df=students.merge(all_reg,how='inner',on='student_id').merge(courses,how='inner',on='course_id')
full_df.groupby(['student_id','name']).agg({'price':'sum'}).sort_values(by='price',ascending=False)[:3]

ipl.info()

# top 3 studiums heighest 6 retio

temp_df=ipl.merge(matches,how='inner',left_on='match_id',right_on='id')

six_df = temp_df[temp_df['batsman_runs'] == 6]

num_sixes = six_df.groupby('venue')['venue'].count()

# total_matches=matches['venue'].value_counts()

num_matches = matches['venue'].value_counts()

(num_sixes/num_matches).sort_values(ascending=False).head(10)

