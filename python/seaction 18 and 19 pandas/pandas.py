# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17OT3ayciXc6zSHYDjaTl-E2SRNlTWLl3
"""



"""#how to create string in pandas"""

import pandas as pd
import numpy as np

city=["Dhaka","Dehli","Istambul","China"]

city=pd.Series(city)

"""In python-pandas most of cases object= string"""

marks=[100,68,49,20,40]
pd.Series(marks)

"""##series with own indexing and value

"""

import pandas as pd
import numpy as np

mark=[78,68,90,69]

print(mark)

subject=['Bangla','english','Math','Higher Math']

s=pd.Series(mark,index=subject,name="Pranto's Mark",dtype=np.int16)
print(s)
print(s['Bangla'])

"""###Series creating using dict:"""

from typing import ItemsView
import pandas as pd
import numpy as np

market_items={
    'Mango':10,
    'Brash':2,
    'Egg':4,
    'banana':13
}

ItemsView=pd.Series(market_items,dtype=np.int16,name="alam bazar")
print(ItemsView)

"""#Attribute of series"""

#size -> show me total items number
print(ItemsView.size)

#dtype -> show me the datatype of value

print(ItemsView.dtype)

#Name

print(ItemsView.name)

#is_unique--all item jodi unique hoy tahole true otherwise false

print(ItemsView.is_unique)

print( pd.Series([1,1,2,3,4,5]).is_unique)

#index

print(ItemsView.index)

print(city.index)

#values

print(ItemsView.values)

"""#after dataset upload code run"""

#sub import as series
import pandas as pd
sub=pd.read_csv('/content/sample_data/subs.csv')
type(sub)

sub=sub.squeeze()

type(sub)

print(sub)

"""#pre defind index as match_no"""

import pandas as pd
import numpy as np

vk=pd.read_csv('/content/sample_data/kohli_ipl.csv',index_col='match_no').squeeze()

print(vk)

import pandas as pd

movie= pd.read_csv('/content/sample_data/bollywood.csv',index_col='movie').squeeze()

print(movie)

"""#Attributes"""

# first 5 row
sub.head()

#if i want row specific
sub.head(100)

#tail work botton

sub.tail()

#if data is bias that's why work sample

sub.sample()  #1 row just

sub.sample(10) #10 row

# value_counts()---->calulate values frequency every data

movie.value_counts()

# sort value

vk.sort_values(ascending=True)

# decending order

vk.sort_values(ascending=False)

# geting highest value

vk.sort_values(ascending=False).head(5).values[0]

# permanent changes

# # Create a copy before sorting in-place
# vk_copy = vk.copy()
# vk_copy.sort_values(inplace=True,ascending=False)

# # If you intend to modify the original 'vk' variable, reassign the sorted copy
# vk = vk_copy

# print(vk)

# movie name order sort

movie.sort_index(ascending=True)

"""# Math use in dataset"""

#count
print("Count : ",vk.count()) #ignore the Null value

#mean()

print("Mean : ",vk.mean())

#median()

print("Median : ",vk.median())

#mode()

print("Mode : ",movie.mode())

#sum()

print("Sum : ",vk.sum())

#std()

print("Standard Deviation : ",vk.std())

#var()

print("Variance : ",vk.var())

#min()

print("Minimum Value : ",vk.min())

#max()

print("Maximum Value : ",vk.max())

"""# shob calculation jodi ekbare tahole ekta function e hobe"""

vk.describe()

#indexing

print(vk[1])

#negative indexing not working

# print(vk[-1])

# negative indexing work in string

print(movie[-1])

"""#Slicing"""

sub[5:100]

# negative slicing

movie[-5:-1]

#fancy indexing

print(vk[[1,3,7,9]])

"""#graph using pandas"""

sub.plot()

top_ten =movie.value_counts().head(10)

# top_ten.plot(kind='pie')

top_ten.plot(kind='bar')

