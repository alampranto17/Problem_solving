# -*- coding: utf-8 -*-
"""dataframeInPandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1C0Pmk5W9C-5qKNX79rnm9g5Z8XNn-B6U
"""

import pandas as pd
import numpy as np

print ("library load")

# using list making data frame

student_data=[
    [100,80,10],
    [60,70,7],
    [120,100,14],
    [80,50,2]
]

columns=['Id','Marks','packages']

# print(student_data)

data=pd.DataFrame(student_data,columns=columns)

print(data)

print(type(data))

print(type(data.Id))

# #dic use kore dataframe

student_dic={
    'iq':[100,90,120,80],
    'marks':[80,70,100,50],
    'package':[10,7,14,2]
}

print(pd.DataFrame(student_dic))

movies=pd.read_csv('/content/movies.csv')

movies

Ipl_matches=pd.read_csv('/content/ipl-matches.csv')
Ipl_matches

"""#attributes and method"""

#shape--> showing row and column

print("movies: ",movies.shape)

print("Ipl Matches : ",Ipl_matches.shape)

# dtype showing all columns type
print("movies : \n",movies.dtypes,"\n")

print("Ipl Matches : \n",Ipl_matches.dtypes)

# index
movies.index
# it is used for using for loop fatch value

# for i in range(1,10):
#   print(movies.loc[i])

#column

movies.columns

#value
Ipl_matches.values

"""#Methods"""

#head and tail

movies.head(10)

Ipl_matches.tail(2)

#sample

Ipl_matches.sample(3)

#info

Ipl_matches.info()

movies.info()

#describe()

movies.describe()

Ipl_matches.describe()

# isNUll
movies.isnull()

# kun column e koto missing value ache ta jana jai
movies.isnull().sum()

# try with series
# movies.story[~movies.story.isnull()]

# try with dataframe
missing_values=movies.isnull().sum()

missing_values=missing_values[missing_values.values>0]

missing_values

duplicate=movies.duplicated().sum()

if(duplicate==0):
  print("the is no duplicated value here!!!")
else:
  print("the is duplicated value here!!!")

#rename()

movies.rename(columns={'title_x':'movie_name'})

"""#column and row

"""

# single column

movies['title_x']

# multiple columns
movies.columns
movies[['title_x','imdb_rating']]

# single row and multiple row
# fuction iloc and loc

movies.iloc[7]

movies.loc[10:100:2]

# fancy indexing
movies.iloc[[10,100,200,260]]

# filtering both row and columns

movies.iloc[10:100:2,0:4:2] #index position

movies.loc[0:10,['genres','imdb_rating']]#levels position with work

# find the final matchwinner and which team win and year

Ipl_matches.head(5)

all_final=Ipl_matches[Ipl_matches.MatchNumber=='Final']

print(all_final.shape[0])

print(all_final.columns)
result=all_final.sort_values(by='Season')

result=result.value_counts('WinningTeam')

result.plot(
    x='WinningTeam',
    y='Margin',
    kind='bar',           # Line plot also possible
    figsize=(10,6),
    title='IPL Final Winners by Season',
    legend=False,
    color='orange',
    xlabel="Winning Team",
    ylabel="Number of Trophy"
)

# how many overfinish in super over

ipl_superOver=Ipl_matches[Ipl_matches.SuperOver=='Y']

print(ipl_superOver.shape[0])

# how many match win in csk at kolkata

csk_match=Ipl_matches[(Ipl_matches.City=='Kolkata') & (Ipl_matches.WinningTeam=='Chennai Super Kings')]

print(csk_match.shape[0])

# how many teams win and same team toss win
total_tosswinning=Ipl_matches[Ipl_matches.TossWinner==Ipl_matches.WinningTeam].shape[0]

print(total_tosswinning/Ipl_matches.shape[0]*100)

# movie rating higher and equal then 8 and number of vote>1000

print(movies[(movies.imdb_rating>=8) & (movies.imdb_votes>1000)].shape[0]/movies.shape[0]*100)

# kun kun movie action ase and rating 7.5 er beshi

def find_action(genres):
  return 'Action' in genres

# movies[movies.genres.str.split('|').apply(find_action) & (movies.imdb_rating>7.5)].shape

movies[movies.genres.str.contains('Action') & (movies.imdb_rating>7.5)].shape

Ipl_matches.info()

# create a function who win total number of matches

def WinnngMatches(team1,team2):
  return Ipl_matches[((Ipl_matches['Team1']==team1) & (Ipl_matches['Team2']==team2)) & ((Ipl_matches['WinningTeam']==team1) | (Ipl_matches['WinningTeam']==team2))]


WinnngMatches("Rajasthan Royals","Royal Challengers Bangalore")[['Team1','Team2','WinningTeam','WonBy']]

# Adding new columns
movies['Country']='India'

movies.info()

# finding missing value and drop them and dataset a column who is leading actor

missing_values=movies.isnull().sum()

missing_values=missing_values[missing_values.values>0]

print("Actor missing value : ",missing_values.actors)


clearmovies= movies.dropna(subset=['actors'])

movies["LeadingActor"]=clearmovies.actors.str.split('|').apply(lambda x:x[0])

movies.loc[:,['actors','LeadingActor']]

# Astype given column er datatype change kore

Ipl_matches.info()

Ipl_matches['ID']=Ipl_matches.ID.astype(np.int32)


Ipl_matches.info()

"""#Important function using in dataframe"""

#value_count(series and dataframe but in data frame it's calculate value of rows and not counts value of row duplicate)
#Ipl find man of match player but in only qualifier round just

Ipl_matches.head(1)

qualifier_round=Ipl_matches[['Season','MatchNumber','WinningTeam','Player_of_Match']]

qualifier_round[~qualifier_round.MatchNumber.str.isdigit()]['Player_of_Match'].value_counts()

Ipl_matches.head(1)
Ipl_matches['TossDecision'].value_counts().plot(kind='pie')

# ipl er modde koto match khelse
# add posible jodi index same hoy

(Ipl_matches['Team1'].value_counts()+Ipl_matches['Team2'].value_counts()).sort_values(ascending=False)

# sorting value
movies.sort_values(by='imdb_rating',ascending=False,na_position='first')

# MULTIPLE LINE SORT

movies.sort_values(by=['year_of_release','title_x'],ascending=[False,True])

# pd.unique

Ipl_matches.Season.unique().shape[0]

# nunique not count nan value

Ipl_matches.method.nunique()
Ipl_matches.method[~Ipl_matches.method.isnull()]

"""#**Missing value handling**"""

movies

# dropna
# drop all row which have missing value
movies.dropna().info()

# if every columns has missing value then drop it
movies.dropna(how='all').info()

# if particular columns has missing value(or operation work)
movies.dropna(subset=['actors','year_of_release'])

# find last vk play agiest delhi

Ipl_matches['allplayer']=Ipl_matches.Team1Players.add(Ipl_matches.Team2Players)

def isvkplay(allplayer,x='V Kohli'):
  return 'V Kohli' in allplayer

Ipl_matches['isplayVk']=Ipl_matches['allplayer'].apply(isvkplay)

isvk=Ipl_matches[Ipl_matches.isplayVk==True]

isvk[isvk.City=='Delhi'].drop_duplicates(subset=['City','isplayVk'],keep='first')

"""# *Class of groupBy most important class \\*

---


"""

# groupby

movie=pd.read_csv('/content/imdb-top-1000.csv')

movie.head(5)

genre=movie.groupby('Genre')

print(genre.size())

genre.mean(numeric_only=True)

genre.sum(numeric_only=True)

genre.max(numeric_only=True)

genre.min(numeric_only=True)

genre.std(numeric_only=True)

genre.median(numeric_only=True)

genre.var(numeric_only=True)

# find the top 3 most income genre
movie.groupby('Genre').sum(numeric_only=True)['Gross'].sort_values(ascending=False)[:3]

# you have to find the that genre which has highest Imdb_rating

movie.groupby('Genre').max(numeric_only=True)['IMDB_Rating'].sort_values(ascending=False)[0:1]

#find most popular director

movie.groupby('Director').sum(numeric_only=True)['No_of_Votes'].sort_values(ascending=False)[:1]

"""# Group by attribute"""

len(movie.groupby('Genre'))

movie.groupby('Genre').nunique()

# size-> bole dei ekta group er modde koto gula group ase

movie.groupby('Genre').size()

movie['Genre'].value_counts()

genre=movie.groupby('Genre')

genre.first()
genre.last()

genre.nth(6)

# particular column er shob show korbo
genre.get_group('Horror')

# genre.groups

# protigroup er modde shob numeric column ke show kore
genre.describe()

genre.sample(2,replace=True)

genre.nunique()

# most important agg function
bx=genre.agg(
    {
        'IMDB_Rating':'mean',
        'No_of_Votes':'max',
        'Gross':'max',
        'Released_Year':'min'
    }
)['Gross'].plot(kind='bar',figsize=(10,6))
for i, bar in enumerate(bx.patches):
    value = bar.get_height()  # প্রত্যেক বারের height মানে Gross value
    bx.text(                     # এখানে bx-ই axes object
        bar.get_x() + bar.get_width()/2,  # X-অক্ষের মাঝখানে
        value,                             # Y-অক্ষ: বারের টপ
        f'    {value:,.0f}',                   # সুন্দর করে কমা সহ ফরম্যাট করা
        ha='center',
        va='bottom',
        fontsize=8,
        rotation=90
    )

n_columns=movie.select_dtypes(include=np.number).columns

genre[n_columns].agg(['mean','max','min'])

# loop using in group

# find the highest rating movie in that group
df=pd.DataFrame(columns=movie.columns)
for group,data in genre:
  print(type(group),type(data))
  top_rating=(data[data.IMDB_Rating==data.IMDB_Rating.max()])
  df=pd.concat([df,top_rating])
df

# combain 2 groups
duo = movie.groupby(['Director', 'Star1'])
duo['Gross'].sum().sort_values(ascending=False)

best_mataScore=movie.groupby(['Star1','Genre'])

best_mataScore.Metascore.mean().reset_index().sort_values(by='Metascore',ascending=False)

# agg

n_columns=movie.select_dtypes(include=np.number).columns
duo[n_columns].agg(['min','max','mean'])

df=pd.read_csv('/content/deliveries.csv')

df[df['batsman'].str.startswith('M')]

# find top 10 batsman ran

df.groupby('batsman')['batsman_runs'].sum().sort_values(ascending=False)[:10]

runs=df.groupby('batsman')['batsman_runs']

six=df[df['batsman_runs']==6].groupby('batsman')['batsman_runs'].value_counts().sort_values(ascending=False)

six.index[0]

# find the batsman who hits 4's and 6's last 5 over

lastFiveover=df[df['over']>=15]



lastFiveover[((lastFiveover.batsman_runs==4) | (lastFiveover.batsman_runs==6))].groupby('batsman')['batsman'].count().sort_values(ascending=False)

# find v.koli highest 4's agaist team

dataVk=df[df['batsman']=='V Kohli']

dataVk[dataVk.batsman_runs==4].groupby('bowling_team')['batsman_runs'].value_counts().sort_values(ascending=False).reset_index()

# find higest sixs vk

vk=df[df.batsman=='V Kohli']

vk[vk.batsman_runs==6].groupby('bowling_team')['batsman_runs'].value_counts().sort_values(ascending=False).reset_index()

# input a name function will be return the highest score of that's batsman
def HighestRunInOneMatch(name='V Kohli'):
  player=df[df.batsman==name]
  run=player.groupby(['match_id','bowling_team']).agg({'batsman_runs':'sum'}).reset_index()
  return run.sort_values(by='batsman_runs',ascending=False).rename(columns={'bowling_team':'opponent','batsman_runs':'Highest_run'}).head(10)

batsman=HighestRunInOneMatch('MS Dhoni')

print(batsman)

batsman.plot(kind='bar',x='match_id',y='Highest_run',figsize=(8,6),color='slateblue')